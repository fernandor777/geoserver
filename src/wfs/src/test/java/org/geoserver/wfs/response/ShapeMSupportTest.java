package org.geoserver.wfs.response;

import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.apache.commons.io.IOUtils;
import org.geotools.data.DataUtilities;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.junit.Test;
import org.locationtech.jts.geom.CoordinateXYZM;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.geom.Polygon;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

/**
 * Tests for Measure (M) coordinate on Shapefiles WFS output
 *
 * @author Fernando Mino, Geosolutions
 */
public class ShapeMSupportTest extends BaseShapeZipTest {

    /** Test for Point ZM support on GetFeature shapefile output */
    @Test
    public void testPointZMShp() throws Exception {
        // create a feature collection of POINT ZM (4D)
        GeometryFactory gf = JTSFactoryFinder.getGeometryFactory();
        SimpleFeatureType featureType =
                DataUtilities.createType("pointmz", "name:String,geom:Point:4326");
        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(featureType);
        fb.add("point1");
        fb.add(gf.createPoint(new CoordinateXYZM(1, 2, 3, 4)));
        List<SimpleFeature> features = new ArrayList<SimpleFeature>();
        features.add(fb.buildFeature("1"));
        SimpleFeatureCollection featureCollection = DataUtilities.collection(features);
        // write the zip shapefile bytes
        byte[] zipBytes = writeOut(featureCollection);
        // get shp file bytes only
        byte[] resultBytes = getShpOnlyBytes(zipBytes);
        // get expected byte array
        InputStream resource = getClass().getClassLoader().getResourceAsStream("shp/pointzm.shp");
        byte[] expectedBytes = IOUtils.toByteArray(resource);
        resource.close();
        // compare generated bytes
        assertTrue(Arrays.equals(resultBytes, expectedBytes));
    }

    /** Test for MultiPoint ZM support on GetFeature shapefile output */
    @Test
    public void testMultiPointZMShp() throws Exception {
        // create a feature collection of POINT ZM (4D)
        GeometryFactory gf = JTSFactoryFinder.getGeometryFactory();
        SimpleFeatureType featureType =
                DataUtilities.createType("multipointmz", "name:String,geom:MultiPoint:4326");
        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(featureType);
        fb.add("points1");
        fb.add(
                gf.createMultiPoint(
                        new Point[] {
                            gf.createPoint(new CoordinateXYZM(1, 2, 3, 4)),
                            gf.createPoint(new CoordinateXYZM(5, 6, 7, 8))
                        }));
        List<SimpleFeature> features = new ArrayList<SimpleFeature>();
        features.add(fb.buildFeature("1"));
        SimpleFeatureCollection featureCollection = DataUtilities.collection(features);
        // write the zip shapefile bytes
        byte[] zipBytes = writeOut(featureCollection);
        // get shp file bytes only
        byte[] resultBytes = getShpOnlyBytes(zipBytes);
        // get expected byte array
        InputStream in = getClass().getClassLoader().getResourceAsStream("shp/multipointmz.shp");
        byte[] expectedBytes = IOUtils.toByteArray(in);
        in.close();
        // compare generated bytes
        assertTrue(Arrays.equals(resultBytes, expectedBytes));
    }

    /** Test for MultiLineString ZM support on GetFeature shapefile output */
    @Test
    public void testMultiLineStringZMShp() throws Exception {
        // create a feature collection of MULTILINESTRING ZM (4D)
        GeometryFactory gf = JTSFactoryFinder.getGeometryFactory();
        SimpleFeatureType featureType =
                DataUtilities.createType("linestringmz", "name:String,geom:MultiLineString:4326");
        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(featureType);
        fb.add("line1");
        fb.add(
                gf.createMultiLineString(
                        new LineString[] {
                            gf.createLineString(
                                    new CoordinateXYZM[] {
                                        new CoordinateXYZM(1, 2, 3, 4),
                                        new CoordinateXYZM(5, 6, 7, 8)
                                    })
                        }));
        List<SimpleFeature> features = new ArrayList<SimpleFeature>();
        features.add(fb.buildFeature("1"));
        SimpleFeatureCollection featureCollection = DataUtilities.collection(features);
        // write the zip shapefile bytes
        byte[] zipBytes = writeOut(featureCollection);
        // get shp file bytes only
        byte[] resultBytes = getShpOnlyBytes(zipBytes);
        // get expected byte array
        InputStream is = getClass().getClassLoader().getResourceAsStream("shp/linestringmz.shp");
        byte[] expectedBytes = IOUtils.toByteArray(is);
        is.close();
        // compare generated bytes
        assertTrue(Arrays.equals(resultBytes, expectedBytes));
    }

    /** Test for MultiPolygon ZM support on GetFeature shapefile output */
    @Test
    public void testMultiPolygonZMShp() throws Exception {
        // create a feature collection of MULTIPOLYGON ZM (4D)
        GeometryFactory gf = JTSFactoryFinder.getGeometryFactory();
        SimpleFeatureType featureType =
                DataUtilities.createType("polygonmz", "name:String,geom:MultiPolygon:4326");
        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(featureType);
        fb.add("polygon1");
        fb.add(
                gf.createMultiPolygon(
                        new Polygon[] {
                            gf.createPolygon(
                                    new CoordinateXYZM[] {
                                        new CoordinateXYZM(0, 0, 3, 1),
                                        new CoordinateXYZM(1, 1, 7, 2),
                                        new CoordinateXYZM(1, 0, 7, 3),
                                        new CoordinateXYZM(0, 0, 3, 1)
                                    })
                        }));
        List<SimpleFeature> features = new ArrayList<SimpleFeature>();
        features.add(fb.buildFeature("1"));
        SimpleFeatureCollection featureCollection = DataUtilities.collection(features);
        // write the zip shapefile bytes
        byte[] zipBytes = writeOut(featureCollection);
        // get shp file bytes only
        byte[] resultBytes = getShpOnlyBytes(zipBytes);
        // get expected byte array
        InputStream in = getClass().getClassLoader().getResourceAsStream("shp/polygonmz.shp");
        byte[] expectedBytes = IOUtils.toByteArray(in);
        // compare generated bytes
        assertTrue(Arrays.equals(resultBytes, expectedBytes));
    }

    /**
     * Extracts bytes only for the shp file from zip
     *
     * @param zip zip byte array
     * @return shp file byte array
     */
    private byte[] getShpOnlyBytes(byte[] zipBytes) throws IOException {
        byte[] resultBytes = new byte[] {};
        ZipInputStream zis = new ZipInputStream(new ByteArrayInputStream(zipBytes));
        ZipEntry entry = null;
        while ((entry = zis.getNextEntry()) != null) {
            final String name = entry.getName();
            if (name.toLowerCase().endsWith(".shp")) {
                // this is the shp file, get bytes
                resultBytes = IOUtils.toByteArray(zis);
            }
        }
        zis.close();
        return resultBytes;
    }
}
